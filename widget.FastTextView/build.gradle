apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: "maven-publish"


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

ext {
    siteUrl = properties.getProperty("siteUrl")
    gitUrl = properties.getProperty("gitUrl")
    libVersion = '1.2.19'
}


group = 'com.lsjwzh'
version = libVersion

android {
    lintOptions {
        abortOnError false
    }

    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 23
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
        versionCode 4
        versionName libVersion

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

task cleanAndroidMock(type: Delete) {
    description = 'Deletes the mockable Android jar'

    delete fileTree("${project.buildDir}/generated") {
        include 'mockable-android*.jar'
    }
}

project.afterEvaluate {
    tasks['createMockableJar'].dependsOn cleanAndroidMock
}
//
bintray {
    user = properties.getProperty('BINTRAY_USER')
    key = properties.getProperty('BINTRAY_KEY')
//    configurations = ['archives']
    publications = ['MyPublication']

    pkg {
        repo = 'maven'
        name = properties.getProperty('maven.name')
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl
        publish = true
        publicDownloadNumbers = true
        version {
            name = libVersion
            desc = properties.getProperty('project.name')
            released = new Date()
            version libVersion
        }
    }
}

//
//install {
//    repositories.mavenInstaller {
//        // This generates POM.xml with proper parameters
//        pom {
//            project {
//                packaging 'aar'
//                name properties.getProperty('project.name')
//                url siteUrl
//                // Set your license
//                licenses {
//                    license {
//                        name 'The Apache Software License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer { //填写的一些基本信息
//                        id properties.getProperty("developer.name")
//                        name properties.getProperty("developer.name")
//                        email properties.getProperty("developer.email")
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}


//android.libraryVariants.all { variant ->
//    println variant.javaCompile.classpath.files
//    if (variant.name == 'release') { //我们只需 release 的 javadoc
//        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
//            // title = ''
//            // description = ''
//            source = variant.javaCompile.source
//            doFirst {
//                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
//            }
//            options {
//                encoding "utf-8"
//                links "http://docs.oracle.com/javase/7/docs/api/"
//                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
//            }
//            exclude '**/BuildConfig.java'
//            exclude '**/R.java'
//        }
//        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
//            classifier = 'javadoc'
//            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
//        }
//        artifacts {
//            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
//        }
//    }
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//    archives file("$buildDir/outputs/aar/$name-release.aar")
//}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer { //填写的一些基本信息
            id properties.getProperty("developer.name")
            name properties.getProperty("developer.name")
            email properties.getProperty("developer.email")
        }
    }

    scm {
        url siteUrl
    }
}

project.afterEvaluate {
    publishing {
        publications {
            MyPublication(MavenPublication) {
                task androidJavadocs(type: Javadoc) {
                    source = android.sourceSets.main.java.srcDirs
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                    android.libraryVariants.all { variant ->
                        if (variant.name == 'release') {
                            owner.classpath += variant.javaCompile.classpath
                        }
                    }
                    failOnError false
                    exclude '**/R.html', '**/R.*.html', '**/index.html'
                }

                task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                    classifier = 'javadoc'
                    from androidJavadocs.destinationDir
                }

                task androidSourcesJar(type: Jar) {
                    classifier = 'sources'
                    from android.sourceSets.main.java.srcDirs
                }

                artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact androidJavadocsJar

                groupId properties.getProperty('project.groudId')
                artifactId properties.getProperty('project.name')
                version libVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'Your description of the lib')
                    root.appendNode('name', 'Your name of the lib')
                    root.appendNode('url', 'https://site_for_lib.tld')
                    root.children().last() + pomConfig
                }
            }
        }
    }
}
